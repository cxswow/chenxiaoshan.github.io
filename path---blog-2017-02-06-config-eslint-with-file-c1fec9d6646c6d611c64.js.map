{"version":3,"sources":["webpack:///path---blog-2017-02-06-config-eslint-with-file-c1fec9d6646c6d611c64.js","webpack:///./.cache/json/blog-2017-02-06-config-eslint-with-file.json"],"names":["webpackJsonp","345","module","exports","data","markdownRemark","html","fields","tagSlugs","frontmatter","title","tags","date","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,0vLAAo3LC,QAA4IC,UAAA,yCAAoDC,aAAgBC,MAAA,gBAAAC,MAAA,eAAAC,KAAA,gBAAqEC,aAAgBC,KAAA","file":"path---blog-2017-02-06-config-eslint-with-file-c1fec9d6646c6d611c64.js","sourcesContent":["webpackJsonp([196993793981773],{\n\n/***/ 345:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>简介</h1>\\n<p>ESLint 是一个代码书写规范检查工具，通过很多规则检查来规范代码的书写风格，也可以找出一些错误。<a href=\\\"http://eslint.org/docs/rules/\\\">ESLint 文档</a>里列出了规则说明，规则详细说明里也有示例。上述网站里也有用户指南、<a href=\\\"http://eslint.cn/docs/rules/\\\">中文版本</a>。\\n有很多 ESLint 的 config 实践可能比直接用 ESLint 更适合自己，我用的就是 <a href=\\\"https://github.com/airbnb/javascript\\\">airbnb</a> 的。</p>\\n<h1>使用</h1>\\n<h3>项目里安装</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> eslint\\n</code></pre>\\n      </div>\\n<p>为了使用方便，在 package.json 里的 <code class=\\\"language-text\\\">scripts</code> 里添加</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token string\\\">\\\"lint\\\"</span><span class=\\\"token keyword\\\">:</span> <span class=\\\"token string\\\">\\\"./node_modules/.bin/eslint\\\"</span>\\n</code></pre>\\n      </div>\\n<p>然后就可以在命令行里使用以下命令来对文件或文件夹进行 ESLint 检查了。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token function\\\">npm</span> run lint 文件/文件夹\\n</code></pre>\\n      </div>\\n<p>如果要用别的 config 实践的要按照可以看它们自己的安装说明进行额外的安装。</p>\\n<h3>配置文件</h3>\\n<p>在项目目录里添加 <code class=\\\"language-text\\\">.eslintrc.*</code> 文件，ESLint 会自动读取它。\\n文件格式：</p>\\n<ul>\\n<li>.eslintrc.json</li>\\n<li>.eslintrc.js: javascript 格式的配置信息，通过 <code class=\\\"language-text\\\">exports</code> 一个对象来配置</li>\\n<li>.eslintrc.yml</li>\\n<li>.eslintrc.yaml</li>\\n<li>.eslintrc: yml 或 json 格式</li>\\n</ul>\\n<p>也可以在 package.json 里添加 eslintConfig 来写入配置信息。</p>\\n<h3>配置信息</h3>\\n<h4>extends</h4>\\n<p>继承已启用的规则配置，一般使用：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"extends\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"eslint:recommended\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>这里配置的规则是 <a href=\\\"http://eslint.org/docs/rules/\\\">ESLint 文档</a>里打勾的规则。\\n我用的 eslint-config-airbnb 是：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"extends\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"airbnb\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h4>env</h4>\\n<p>配置启用环境，要启用的环境写在这里，并设置为 <code class=\\\"language-text\\\">true</code> ，如：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"env\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">\\\"browser\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"node\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">true</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h4>rule</h4>\\n<p>在 extends 里指定了设定好要启用的规则，但是很多时候有部分不一样，在这里可以设置让 extends 里部分规则不启用。rule 的使用要谨慎。\\n像在 airbnb 里面启用了分号检查，即必须使用分号，而我不想使用分号，配置如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"extends\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"airbnb\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"rule\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">\\\"semi\\\"</span><span class=\\\"token operator\\\">:</span> “off\\\"\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>这里的 <code class=\\\"language-text\\\">semi</code> 就是分号检查规则。\\neslint 里很多规则记不住谁是谁的话，在用 eslint 检查后它告诉你违背了哪些规则，然后在文档里查这些规则就可以知道规则具体说明，然后就可以选择是否使用它。规则值：</p>\\n<ul>\\n<li>“off” 或 0 - 关闭规则</li>\\n<li>“warn” 或 1 - 开启规则，使用警告级别的错误：warn (不会导致程序退出)</li>\\n<li>“error” 或 2 - 开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)</li>\\n</ul>\\n<h4>plugins</h4>\\n<p>第三方插件配置，使用前要 npm 安装它。\\n插件名称可以省略 <code class=\\\"language-text\\\">eslint-plugin-</code> 前缀。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"plugins\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token string\\\">\\\"plugin1\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"eslint-plugin-plugin2\\\"</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h4>globals</h4>\\n<p> 很多默认开启规则的 config 都不允许使用全局变量，它们被认为是未定义的变量，由 no-undef 规则来发出警告。所以如果要使用全局变量的话，推荐做法是在配置文件里的 globals 里声明它(等于 <code class=\\\"language-text\\\">true</code> 允许变量被重写，<code class=\\\"language-text\\\">false</code> 不允许变量被重写)：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"globals\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">\\\"globalsVar1\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"globalsVar2\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">false</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p><strong>参考</strong>：</p>\\n<p><a href=\\\"http://eslint.cn/docs/rules/\\\">ESLint 中文</a></p>\",\"fields\":{\"tagSlugs\":[\"/blog/tags/es-lint/\",\"/blog/tags/js/\"]},\"frontmatter\":{\"title\":\"通过文件配置 ESLint\",\"tags\":[\"ESLint\",\"JS\"],\"date\":\"2017-02-06\"}}},\"pathContext\":{\"slug\":\"/blog/2017-02-06-config-eslint-with-file\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---blog-2017-02-06-config-eslint-with-file-c1fec9d6646c6d611c64.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>简介</h1>\\n<p>ESLint 是一个代码书写规范检查工具，通过很多规则检查来规范代码的书写风格，也可以找出一些错误。<a href=\\\"http://eslint.org/docs/rules/\\\">ESLint 文档</a>里列出了规则说明，规则详细说明里也有示例。上述网站里也有用户指南、<a href=\\\"http://eslint.cn/docs/rules/\\\">中文版本</a>。\\n有很多 ESLint 的 config 实践可能比直接用 ESLint 更适合自己，我用的就是 <a href=\\\"https://github.com/airbnb/javascript\\\">airbnb</a> 的。</p>\\n<h1>使用</h1>\\n<h3>项目里安装</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> eslint\\n</code></pre>\\n      </div>\\n<p>为了使用方便，在 package.json 里的 <code class=\\\"language-text\\\">scripts</code> 里添加</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token string\\\">\\\"lint\\\"</span><span class=\\\"token keyword\\\">:</span> <span class=\\\"token string\\\">\\\"./node_modules/.bin/eslint\\\"</span>\\n</code></pre>\\n      </div>\\n<p>然后就可以在命令行里使用以下命令来对文件或文件夹进行 ESLint 检查了。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token function\\\">npm</span> run lint 文件/文件夹\\n</code></pre>\\n      </div>\\n<p>如果要用别的 config 实践的要按照可以看它们自己的安装说明进行额外的安装。</p>\\n<h3>配置文件</h3>\\n<p>在项目目录里添加 <code class=\\\"language-text\\\">.eslintrc.*</code> 文件，ESLint 会自动读取它。\\n文件格式：</p>\\n<ul>\\n<li>.eslintrc.json</li>\\n<li>.eslintrc.js: javascript 格式的配置信息，通过 <code class=\\\"language-text\\\">exports</code> 一个对象来配置</li>\\n<li>.eslintrc.yml</li>\\n<li>.eslintrc.yaml</li>\\n<li>.eslintrc: yml 或 json 格式</li>\\n</ul>\\n<p>也可以在 package.json 里添加 eslintConfig 来写入配置信息。</p>\\n<h3>配置信息</h3>\\n<h4>extends</h4>\\n<p>继承已启用的规则配置，一般使用：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"extends\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"eslint:recommended\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>这里配置的规则是 <a href=\\\"http://eslint.org/docs/rules/\\\">ESLint 文档</a>里打勾的规则。\\n我用的 eslint-config-airbnb 是：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"extends\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"airbnb\\\"</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h4>env</h4>\\n<p>配置启用环境，要启用的环境写在这里，并设置为 <code class=\\\"language-text\\\">true</code> ，如：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"env\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">\\\"browser\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"node\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">true</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h4>rule</h4>\\n<p>在 extends 里指定了设定好要启用的规则，但是很多时候有部分不一样，在这里可以设置让 extends 里部分规则不启用。rule 的使用要谨慎。\\n像在 airbnb 里面启用了分号检查，即必须使用分号，而我不想使用分号，配置如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"extends\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"airbnb\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token property\\\">\\\"rule\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">\\\"semi\\\"</span><span class=\\\"token operator\\\">:</span> “off\\\"\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>这里的 <code class=\\\"language-text\\\">semi</code> 就是分号检查规则。\\neslint 里很多规则记不住谁是谁的话，在用 eslint 检查后它告诉你违背了哪些规则，然后在文档里查这些规则就可以知道规则具体说明，然后就可以选择是否使用它。规则值：</p>\\n<ul>\\n<li>“off” 或 0 - 关闭规则</li>\\n<li>“warn” 或 1 - 开启规则，使用警告级别的错误：warn (不会导致程序退出)</li>\\n<li>“error” 或 2 - 开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)</li>\\n</ul>\\n<h4>plugins</h4>\\n<p>第三方插件配置，使用前要 npm 安装它。\\n插件名称可以省略 <code class=\\\"language-text\\\">eslint-plugin-</code> 前缀。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"plugins\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token string\\\">\\\"plugin1\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"eslint-plugin-plugin2\\\"</span>\\n    <span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h4>globals</h4>\\n<p> 很多默认开启规则的 config 都不允许使用全局变量，它们被认为是未定义的变量，由 no-undef 规则来发出警告。所以如果要使用全局变量的话，推荐做法是在配置文件里的 globals 里声明它(等于 <code class=\\\"language-text\\\">true</code> 允许变量被重写，<code class=\\\"language-text\\\">false</code> 不允许变量被重写)：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"globals\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">\\\"globalsVar1\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"globalsVar2\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">false</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p><strong>参考</strong>：</p>\\n<p><a href=\\\"http://eslint.cn/docs/rules/\\\">ESLint 中文</a></p>\",\"fields\":{\"tagSlugs\":[\"/blog/tags/es-lint/\",\"/blog/tags/js/\"]},\"frontmatter\":{\"title\":\"通过文件配置 ESLint\",\"tags\":[\"ESLint\",\"JS\"],\"date\":\"2017-02-06\"}}},\"pathContext\":{\"slug\":\"/blog/2017-02-06-config-eslint-with-file\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/_json-loader@0.5.7@json-loader!./.cache/json/blog-2017-02-06-config-eslint-with-file.json\n// module id = 345\n// module chunks = 196993793981773"],"sourceRoot":""}